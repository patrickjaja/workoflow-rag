services:
  # FastAPI Application with Debug Support
  app:
    build: .
    container_name: rag-api
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    environment:
      - PYTHONUNBUFFERED=1
      - DEBUG_MODE=true
    env_file:
      - .env
    volumes:
      - ./app:/app
      - ./example_data:/example_data:ro
    depends_on:
      - qdrant
      - minio
    networks:
      - rag-network
    # Start with debugpy, waiting for client connection
    command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.11.0
    container_name: rag-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - rag-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: rag-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client for initial bucket setup
  minio-client:
    image: minio/mc:latest
    container_name: rag-minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/documents || true;
      mc policy set public myminio/documents;
      echo 'MinIO bucket created';
      "
    networks:
      - rag-network

volumes:
  qdrant_storage:
  minio_data:

networks:
  rag-network:
    driver: bridge